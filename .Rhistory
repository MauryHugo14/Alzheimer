) %>%
fmt_number(
columns = vars(p.value),  # Formater les p-values
decimals = 3  # Limiter à 3 décimales
) %>%
# Formater la p-value pour afficher 0% quand elle est inférieure à 0.001
mutate(
p.value = ifelse(p.value < 0.001, "0%", format(p.value, digits = 3))
) %>%
# Mettre en gras les noms des variables
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = vars(term))
) %>%
# Mettre en italique les niveaux des variables
tab_style(
style = cell_text(style = "italic"),
locations = cells_body(columns = vars(term))
)
model_summary$p.value
model_summary = model_summary %>%
# Formater la p-value pour afficher 0% quand elle est inférieure à 0.001
mutate(
p.value = ifelse(p.value < 0.001, "0%", format(p.value, digits = 3))
)
# Créer le tableau avec gt
model_summary_table <- model_summary %>%
gt() %>%
tab_header(
title = "Résultats du modèle de régression logistique"
) %>%
cols_label(
term = "Variable",    # Nom de la variable
estimate = "Estimation",  # Estimation des coefficients
p.value = "p-value"    # p-value
) %>%
fmt_number(
columns = vars(estimate),  # Formater les estimations des coefficients
decimals = 3  # Limiter à 3 décimales
) %>%
fmt_number(
columns = vars(p.value),  # Formater les p-values
decimals = 3  # Limiter à 3 décimales
) %>%
# Mettre en gras les noms des variables
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = vars(term))
) %>%
# Mettre en italique les niveaux des variables
tab_style(
style = cell_text(style = "italic"),
locations = cells_body(columns = vars(term))
)
model_summary_table <- model_summary %>%
gt() %>%
tab_header(
title = "Résultats du modèle de régression logistique"
) %>%
cols_label(
term = "Variable",    # Nom de la variable
estimate = "Estimation",  # Estimation des coefficients
p.value = "p-value"    # p-value
) %>%
fmt_number(
columns = vars(estimate),  # Formater les estimations des coefficients
decimals = 3  # Limiter à 3 décimales
) %>%
fmt_number(
columns = vars(p.value),  # Formater les p-values
decimals = 3  # Limiter à 3 décimales
) %>%
# Mettre en gras les noms des variables
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = vars(term))
) %>%
# Mettre en italique les niveaux des variables
tab_style(
style = cell_text(style = "italic"),
locations = cells_body(columns = vars(term))
)
model_summary_table
model_summary = model_summary %>%
# Formater la p-value pour afficher 0% quand elle est inférieure à 0.001
mutate(
p.value = ifelse(p.value < 0.001, 0, format(p.value, digits = 3))
)
# Créer un tableau résumant les résultats du modèle
model_summary <- tidy(model2)
model_summary = model_summary[c(1,2,5)]
model_summary = model_summary %>%
# Formater la p-value pour afficher 0% quand elle est inférieure à 0.001
mutate(
p.value = ifelse(p.value < 0.001, 0, format(p.value, digits = 3))
)
model_summary$p.value = as.numeric(model_summary$p.value)
# Créer le tableau avec gt
model_summary_table <- model_summary %>%
gt() %>%
tab_header(
title = "Résultats du modèle de régression logistique"
) %>%
cols_label(
term = "Variable",    # Nom de la variable
estimate = "Estimation",  # Estimation des coefficients
p.value = "p-value"    # p-value
) %>%
fmt_number(
columns = vars(estimate),  # Formater les estimations des coefficients
decimals = 3  # Limiter à 3 décimales
) %>%
fmt_number(
columns = vars(p.value),  # Formater les p-values
decimals = 3  # Limiter à 3 décimales
) %>%
# Mettre en gras les noms des variables
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = vars(term))
) %>%
# Mettre en italique les niveaux des variables
tab_style(
style = cell_text(style = "italic"),
locations = cells_body(columns = vars(term))
)
model_summary_table
# Courbe de sensibilité et de spécificité
library(ROCR)
proba = predict(model2, newdata=train, type="response")
pred <- prediction(proba, train$Diagnostic)
perf2 = performance(pred, measure = "sens", x.measure = "spec")
data2 = data.frame(Sensibility = perf2@y.values[[1]], Specificity = perf2@x.values[[1]], Cutoff = perf2@alpha.values[[1]])
(opt2 = data2[which.min(abs(data2$Sensibility - data2$Specificity)),])
ggplot(data=data2)+
geom_line(aes(x=Cutoff, y=Sensibility, color="1"), size=1.3)+
geom_line(aes(x=Cutoff, y=Specificity, color="2"), size=1.3)+
labs(title="Courbe de sensibilité et de spécificité", x="Cutoff", y="Value")+
scale_color_discrete(name = "", labels = c("Sensitivity", "Specificity"))+
geom_vline(aes(xintercept=opt2$Cutoff), lty=2)+
annotate(geom = "text", x=0.25, y=0.80, label=paste("Seuil : ", (opt2$Cutoff)))
# Prévision
probability = model2 %>% predict(newdata=test, type="response")
predicted = ifelse(probability > opt2$Cutoff, "yes", "no")
predicted = factor(predicted)
# Matrice de confusion
confusionMatrix(data=predicted, reference=test$Outcome, positive = "yes")
# Matrice de confusion
confusionMatrix(data=predicted, reference=test$Diagnostic, positive = "yes")
# Importation des packages
library(dplyr)
library(gtsummary)
library(gt)
library(car)
library(caret)
library(MASS)
library(broom)
# Importations des données
dataset = read.csv("alzheimers_disease_data.csv")
# Traduction des variables en français
traduction = c("PatientID", "Age", "Genre", "Ethnicité", "Niveau_éducation", "IMC", "Tabagisme", "Conso_alcool", "Activité_physique",
"Qualité_alimentaire", "Qualité_sommeil", "Antécédents_familiaux_alz", "Maladie_cardio", "Diabète", "Dépression",
"Blessure_tête", "Hypertension", "Pression_artériel_systolique", "Pression_artérielle_diastolique", "Cholestérol_tot",
"Cholestérol_LDL", "Cholestérol_HDL", "Triglycérides", "MMSE", "Evaluation_fonctionnelle", "Plaintes_mémoires",
"Problèmes_comportementaux", "ADL", "Confusion", "Désorientation", "Changement_perso", "Difficulté_accomplir_tache",
"Oubli", "Diagnostic", "Medecin_en_charge")
var = 1
for (colonne in names(dataset)) {
# Renommer les colonnes en utilisant la traduction
dataset <- dataset %>% rename(!!traduction[var] := all_of(colonne))
var = var + 1
}
# Détails démographiques
data_demo = dataset %>%
select(Age, Genre, Ethnicité, Niveau_éducation, Diagnostic)
# Importation des packages
library(dplyr)
library(gtsummary)
library(gt)
library(car)
library(caret)
library(MASS)
library(broom)
# Importations des données
dataset = read.csv("alzheimers_disease_data.csv")
# Traduction des variables en français
traduction = c("PatientID", "Age", "Genre", "Ethnicité", "Niveau_éducation", "IMC", "Tabagisme", "Conso_alcool", "Activité_physique",
"Qualité_alimentaire", "Qualité_sommeil", "Antécédents_familiaux_alz", "Maladie_cardio", "Diabète", "Dépression",
"Blessure_tête", "Hypertension", "Pression_artériel_systolique", "Pression_artérielle_diastolique", "Cholestérol_tot",
"Cholestérol_LDL", "Cholestérol_HDL", "Triglycérides", "MMSE", "Evaluation_fonctionnelle", "Plaintes_mémoires",
"Problèmes_comportementaux", "ADL", "Confusion", "Désorientation", "Changement_perso", "Difficulté_accomplir_tache",
"Oubli", "Diagnostic", "Medecin_en_charge")
var = 1
for (colonne in names(dataset)) {
# Renommer les colonnes en utilisant la traduction
dataset <- dataset %>% rename(!!traduction[var] := all_of(colonne))
var = var + 1
}
# Détails démographiques
data_demo = dataset %>%
select(Age, Genre, Ethnicité, Niveau_éducation, Diagnostic)
# Détails démographiques
data_demo = dataset %>%
select(Age, Genre, Ethnicité, Niveau_éducation, Diagnostic)
# Importation des packages
library(dplyr)
library(gtsummary)
library(gt)
library(car)
library(caret)
library(MASS)
library(broom)
# Importations des données
dataset = read.csv("alzheimers_disease_data.csv")
# Traduction des variables en français
traduction = c("PatientID", "Age", "Genre", "Ethnicité", "Niveau_éducation", "IMC", "Tabagisme", "Conso_alcool", "Activité_physique",
"Qualité_alimentaire", "Qualité_sommeil", "Antécédents_familiaux_alz", "Maladie_cardio", "Diabète", "Dépression",
"Blessure_tête", "Hypertension", "Pression_artériel_systolique", "Pression_artérielle_diastolique", "Cholestérol_tot",
"Cholestérol_LDL", "Cholestérol_HDL", "Triglycérides", "MMSE", "Evaluation_fonctionnelle", "Plaintes_mémoires",
"Problèmes_comportementaux", "ADL", "Confusion", "Désorientation", "Changement_perso", "Difficulté_accomplir_tache",
"Oubli", "Diagnostic", "Medecin_en_charge")
var = 1
for (colonne in names(dataset)) {
# Renommer les colonnes en utilisant la traduction
dataset <- dataset %>% rename(!!traduction[var] := all_of(colonne))
var = var + 1
}
# Détails démographiques
data_demo = dataset %>% select(Age, Genre, Ethnicité, Niveau_éducation, Diagnostic)
# Détails démographiques
data_demo = dataset[, c(2:5, 35)]
tableau__detail_demo <- data_demo %>%
mutate(Genre = ifelse(Genre == 0, "Homme", "Femme"),
Ethnicité = ifelse(Ethnicité == 0, "Caucasien",
ifelse(Ethnicité == 1, "Afro-Américain",
ifelse(Ethnicité == 2, "Asiatique", "Autre"))),
Niveau_éducation = ifelse(Niveau_éducation == 0, "Aucun",
ifelse(Niveau_éducation == 1, "Lycée",
ifelse(Niveau_éducation == 2, "Licence", "Supérieur"))),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))
) %>%
rename("Niveau d'éducation" = Niveau_éducation) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par détails démographiques"
)
# Détails démographiques
data_demo = dataset[, c(2:5, 34)]
tableau__detail_demo <- data_demo %>%
mutate(Genre = ifelse(Genre == 0, "Homme", "Femme"),
Ethnicité = ifelse(Ethnicité == 0, "Caucasien",
ifelse(Ethnicité == 1, "Afro-Américain",
ifelse(Ethnicité == 2, "Asiatique", "Autre"))),
Niveau_éducation = ifelse(Niveau_éducation == 0, "Aucun",
ifelse(Niveau_éducation == 1, "Lycée",
ifelse(Niveau_éducation == 2, "Licence", "Supérieur"))),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))
) %>%
rename("Niveau d'éducation" = Niveau_éducation) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par détails démographiques"
)
# Détails facteurs de mode de vie
data_vie = dataset %>%
select(IMC, Tabagisme, Conso_alcool, Activité_physique, Qualité_alimentaire, Qualité_sommeil, Diagnostic)
# Détails facteurs de mode de vie
data_vie = dataset[, c(6:11, 34)]
tableau__detail_vie <- data_vie %>%
mutate(Tabagisme = case_when(
Tabagisme == 0 ~ "Non-fumeur",
TRUE ~ "Fumeur"
),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))) %>%
rename("Consommation d'alcool" = Conso_alcool,
"Activité physique" =  Activité_physique,
"Qualité d'alimentation" = Qualité_alimentaire,
"Qualité du sommeil" = Qualité_sommeil) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par facteurs de mode de vie"
)
# Détails antécédents médicaux
data_ant_med = dataset[, c(12:17, 34)]
tableau__detail_ant_med <- data_ant_med %>%
mutate(Antécédents_familiaux_alz = case_when(
Antécédents_familiaux_alz == 0 ~ "Non",
TRUE ~ "Oui"
),
Maladie_cardio = case_when(
Maladie_cardio == 0 ~ "Non",
TRUE ~ "Oui"
),
Diabète = case_when(
Diabète == 0 ~ "Non",
TRUE ~ "Oui"
),
Dépression = case_when(
Dépression == 0 ~ "Non",
TRUE ~ "Oui"
),
Blessure_tête = case_when(
Blessure_tête == 0 ~ "Non",
TRUE ~ "Oui"
),
Hypertension = case_when(
Hypertension == 0 ~ "Non",
TRUE ~ "Oui"
),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))) %>%
rename("Antécédents familiaux d'Alzheimer" = Antécédents_familiaux_alz,
"Maladie cardiovasculaire" =  Maladie_cardio) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par antécédents médicaux"
)
# Détails amesure clinique
data_mes_cli = dataset[, c(18:23, 34)]
tableau__detail_mes_cli <- data_mes_cli %>%
mutate(Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))) %>%
rename("Pression artérielle systolique" = Pression_artériel_systolique,
"Pression artérielle diastolique" =  Pression_artérielle_diastolique,
"Cholestérol total" = Cholestérol_tot,
"Cholestérol LDL" = Cholestérol_LDL,
"Cholestérol HDL" = Cholestérol_HDL) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par mesure clinique"
)
# Détails évaluations cognitives et fonctionnelles
data_cog_fon = dataset[, c(24:28, 34)]
tableau__detail_cog_fon <- data_cog_fon %>%
mutate(Plaintes_mémoires = case_when(
Plaintes_mémoires == 0 ~ "Non",
TRUE ~ "Oui"
),
Problèmes_comportementaux = case_when(
Problèmes_comportementaux == 0 ~ "Non",
TRUE ~ "Oui"
),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))) %>%
rename("Evaluation fonctionnelle" = Evaluation_fonctionnelle,
"Plaintes mémoires" =  Plaintes_mémoires,
"Problèmes comportementaux" = Problèmes_comportementaux) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par évaluations cognitives et fonctionnelles"
)
# Détails symptomes
data_sym = dataset[, c(28:32, 34)]
tableau__detail_sym <- data_sym %>%
mutate(Confusion = case_when(
Confusion == 0 ~ "Non",
TRUE ~ "Oui"
),
Désorientation = case_when(
Désorientation == 0 ~ "Non",
TRUE ~ "Oui"
),
Changement_perso = case_when(
Changement_perso == 0 ~ "Non",
TRUE ~ "Oui"
),
Difficulté_accomplir_tache = case_when(
Difficulté_accomplir_tache == 0 ~ "Non",
TRUE ~ "Oui"
),
Oubli = case_when(
Oubli == 0 ~ "Non",
TRUE ~ "Oui"
),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))) %>%
rename("Changement de personnalité" = Changement_perso,
"Difficulté à accomplir une tâche" =  Difficulté_accomplir_tache) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par symptômes"
)
# Détails symptomes
data_sym = dataset[, c(28:34)]
tableau__detail_sym <- data_sym %>%
mutate(Confusion = case_when(
Confusion == 0 ~ "Non",
TRUE ~ "Oui"
),
Désorientation = case_when(
Désorientation == 0 ~ "Non",
TRUE ~ "Oui"
),
Changement_perso = case_when(
Changement_perso == 0 ~ "Non",
TRUE ~ "Oui"
),
Difficulté_accomplir_tache = case_when(
Difficulté_accomplir_tache == 0 ~ "Non",
TRUE ~ "Oui"
),
Oubli = case_when(
Oubli == 0 ~ "Non",
TRUE ~ "Oui"
),
Diagnostic =  factor(Diagnostic, levels = c(0, 1), labels = c("Non-atteint", "Atteint"))) %>%
rename("Changement de personnalité" = Changement_perso,
"Difficulté à accomplir une tâche" =  Difficulté_accomplir_tache) %>%
tbl_summary(
by = Diagnostic,
statistic = list(all_categorical() ~ "{n} ({p}%)") # pourcentage pour les variables catégorielles
) %>%
add_p() %>%
bold_labels() %>%
italicize_levels() %>%
modify_header(
list(
label ~ "**Variable**",
all_stat_cols(stat_0 = FALSE) ~ "_{level}_ (n={n}, {style_percent(p)}%)"
)
)  %>%
as_gt() %>% # Convertir en objet gt pour personnalisation
tab_header(
title = "Distribution des caractéristiques de l'Alzheimer par symptômes"
)
